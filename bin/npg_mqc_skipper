#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Getopt::Long;
use Pod::Usage;
use Log::Log4perl qw(:levels);
use DBI;
use Readonly;
use Try::Tiny;
use List::MoreUtils qw(none);

use npg_tracking::Schema;
use WTSI::DNAP::Warehouse::Schema;
use npg_qc::Schema;
use npg_qc::mqc::skipper;

our $VERSION = '0';

Readonly::Array  my @EXCLUDE_STUDY_NAMES   => ('Illumina Controls','Heron PhiX');
Readonly::Scalar my $NUM_DISTINCT_STUDIES => 1;
Readonly::Scalar my $RUN_STATUS_FROM      => 'qc review pending';
Readonly::Scalar my $RUN_STATUS_TO        => 'archival pending';
Readonly::Scalar my $INSTRUMENT_MODEL     => 'NovaSeq';
Readonly::Array  my @NO_SKIPPING_TAGS     => qw(no_mqc_skipper no_auto);

Readonly::Scalar my $DEPLEXING_PERCENT_THRESHOLD => 93;
Readonly::Scalar my $QC_FAILS_PERCENT_THRESHOLD  => 10;

my $dry_run = 1;
my $study_name;
my $deplexing_threshold = $DEPLEXING_PERCENT_THRESHOLD;
my $qc_fails_threshold  = $QC_FAILS_PERCENT_THRESHOLD;
my $artic_qc_fails_threshold;

GetOptions('dry_run|dry-run!' => \$dry_run,
           'study_name=s'     => \$study_name,
           'deplexing_percent_threshold=i' => \$deplexing_threshold,
           'qc_fails_percent_threshold=i'  => \$qc_fails_threshold,
	   'artic_qc_fails_percent_threshold=i'  => \$artic_qc_fails_threshold,
           'help'             => sub {
             pod2usage(-verbose => 2,
                       -exitval => 0)
           });

my $layout = '%d %-5p %c - %m%n';
Log::Log4perl->easy_init({layout => $layout,
                          level  => $INFO,
                          utf8   => 1});

my $logger = Log::Log4perl->get_logger();

if (not $study_name) {
  $logger->fatal('Study name should be given, use --study_name option');
  exit 1;
} else {
  $logger->info("Study name: $study_name");
  $logger->info("Deplexing percent threshold: $deplexing_threshold");
  $logger->info("QC fails percent threshold: $qc_fails_threshold");
  if (defined $artic_qc_fails_threshold) {
    $logger->info("Artic QC fails percent threshold: $artic_qc_fails_threshold");
  }
  $dry_run and $logger->info('DRY RUN');
}

my $tracking_schema = npg_tracking::Schema->connect();
my @rows = $tracking_schema->resultset('Run')->search(
  {'run_statuses.iscurrent'      => 1,
   'run_status_dict.description' => $RUN_STATUS_FROM,
   'instrument_format.model'     => $INSTRUMENT_MODEL},
  {prefetch => [{'run_statuses' => 'run_status_dict'}, 'instrument_format']}
							   )->all();
@rows = grep { my $row = $_; none { $row->is_tag_set($_) } @NO_SKIPPING_TAGS }
        @rows;

if (!@rows) {
  $logger->info(sprintf q(No %s runs with status '%s' and without tag %s),
                $INSTRUMENT_MODEL,
                $RUN_STATUS_FROM,
                join q( or ), map { q(') . $_ . q(') } @NO_SKIPPING_TAGS);
  exit 0;
}

my $create_placeholders = sub {
  my @ids = @_;
  return join q[,], map { q[?] } @ids;
};

my $get_run_ids = sub {
  my $sth = shift;
  my @run_ids = ();
  while (my @data = $sth->fetchrow_array()) {
    push @run_ids, $data[0];
  }
  return @run_ids;
};

my @run_ids = map { $_->id_run } @rows;
my $placeholders = $create_placeholders->(@run_ids);
my $excludeplaceholders = $create_placeholders->(@EXCLUDE_STUDY_NAMES);

my $mlwh_schema = WTSI::DNAP::Warehouse::Schema->connect();
my $dbh = $mlwh_schema->storage->dbh;
my $query =
   q[select p.id_run, count(distinct s.id_study_lims) as study_count ] .
   q[from iseq_product_metrics p ] .
   q[join iseq_flowcell f on p.id_iseq_flowcell_tmp=f.id_iseq_flowcell_tmp ] .
   q[join study s on s.id_study_tmp=f.id_study_tmp ] .
  qq[where s.name not in (${excludeplaceholders}) and p.id_run in (${placeholders}) ] .
   q[group by p.id_run having study_count = ?];
my $sth = $dbh->prepare($query) or
  ($logger->fatal("Failed to prepare statement: $DBI::errstr") and exit 1);
# Run time database errors are thrown by the execute method, no need to
# do anything special.
$sth->execute(@EXCLUDE_STUDY_NAMES, @run_ids, $NUM_DISTINCT_STUDIES);
@run_ids = $get_run_ids->($sth);

if (@run_ids) {
  $placeholders = $create_placeholders->(@run_ids);
  $query =
     q[select distinct p.id_run from iseq_product_metrics p join iseq_flowcell f ] .
     q[on p.id_iseq_flowcell_tmp=f.id_iseq_flowcell_tmp ] .
     q[join study s on s.id_study_tmp=f.id_study_tmp ] .
    qq[where s.name = ? and p.id_run in (${placeholders})];
  $sth = $dbh->prepare($query) or
    ($logger->fatal("Failed to prepare statement: $DBI::errstr") and exit 1);
  $sth->execute($study_name, @run_ids);
  @run_ids = $get_run_ids->($sth);
}

if (@run_ids) {
  $placeholders = $create_placeholders->(@run_ids);
  $query =  q[select distinct(id_run) from iseq_run_lane_metrics ] .
            q[where (tags_decode_percent is null or tags_decode_percent < ?) ] .
           qq[and id_run in (${placeholders})];
  $sth = $dbh->prepare($query) or
    ($logger->fatal("Failed to prepare statement: $DBI::errstr") and exit 1);
  $sth->execute($deplexing_threshold, @run_ids);
  my $temp = {};
  while (my @data = $sth->fetchrow_array()) {
     $temp->{$data[0]} = 1;
  }
  if (keys %{$temp}) {
    @run_ids = grep { not $temp->{$_} } @run_ids;
  }
}

@run_ids = _qc_assessment(@run_ids);
if (@run_ids) {
  $logger->info(join qq[\n\t], q[],
                qq[Study '$study_name'],
                qq[runs to move from '$RUN_STATUS_FROM' to '$RUN_STATUS_TO':],
                join q[, ], @run_ids);
} else {
  $logger->info("No runs to move for study '$study_name'");
  exit 0;
}

if ($dry_run) {
  $logger->info('DRY RUN mode, not changing run statuses');
  exit 0;
}

my $rs = $tracking_schema->resultset('Run')->search({id_run => \@run_ids});
while (my $row = $rs->next()) {

  my $id_run= $row->id_run;

  my $transaction = sub {
    # It's been some time since we received the listing of
    # potentially eligible runs, let's double check the
    # current status of the run.
    my $cs = $row->current_run_status_description;
    if ($cs eq $RUN_STATUS_FROM) {
      $row->update_run_status($RUN_STATUS_TO);
      $cs = $RUN_STATUS_TO;
    }
    return $cs;
  };

  my $new_status;
  my $error;
  try {
    $new_status = $tracking_schema->txn_do($transaction);
  } catch {
    $error = $_;
  };

  if ($error) {
    my $m = "Failed to update status of run ${id_run}: $error";
    if ($error =~ /Rollback failed/smx) {
      $logger->fatal($m);
      exit 1;
    } else {
      $logger->error($m);
    }
  } else {
    my $m = "Status of run $id_run has been changed to '$new_status'";
    if ($new_status eq $RUN_STATUS_TO) {
      # We take the credit for changing the status, at least
      # the new status is what we wanted to change to.
      $logger->info($m);
    } else {
      # Somebody else has changed the status, and it's now not
      # what we wanted it to be. No further action.
      $logger->warn($m . ' outside of this script');
    }
  }
}

sub _qc_assessment {
  my @ids = @_;

  @ids or return ();

  $logger->info('Candidate runs: ' . join q[, ], @ids);

  my $ref = {
          npg_tracking_schema    => $tracking_schema,
          mlwh_schema            => $mlwh_schema,
          qc_schema              => npg_qc::Schema->connect(),
          qc_fails_threshold     => $qc_fails_threshold,
          id_runs                => \@ids,
          logger                 => $logger
            };
  if (defined $artic_qc_fails_threshold) {
    $ref->{'artic_qc_fails_threshold'} = $artic_qc_fails_threshold;
  }
  my $skipper = npg_qc::mqc::skipper->new($ref);

  @ids = $skipper->select_runs();
  $logger->info('Candidate runs that satisfy QC criteria: ' .
    @ids ? (join q[, ], @ids) : 'none');

  if (@ids && $study_name =~ /Heron/xms) {
    if ($dry_run) {
      $logger->info('DRY RUN mode, not saving QC outcomes');
    } else {
      $logger->info('Saving preliminary QC outcomes');
      @ids = $skipper->save_review_results(@ids);
      if (@ids) {
        $logger->info('Finalising QC outcomes');
        @run_ids = $skipper->set_final_seq_outcomes(@ids);
      }
    }
  }

  return @ids;
}

exit 0;

__END__

=head1 NAME

npg_mqc_skipper

=head1 USAGE

=head1 REQUIRED ARGUMENTS

 Study name as --study_name

=head1 OPTIONS

=over

=item  --study_name

=item  --dry_run or --dry-run and --no-dry_run and --no-dry-run

=item  --deplexing_percent_threshold

=item  --qc_fails_percent_threshold

=item  --artic_qc_fails_percent_threshold

=item  --help

=back

=head1 EXIT STATUS

0 if all runs were processed succesfully, 1 if there are problems
getting an initial list of runs or while updating any record and the
transaction fails to rollback.

=head1 CONFIGURATION

=head1 SYNOPSIS

npg_mqc_skipper --study_name 'SOME STUDY' # runs in dry run mode
npg_mqc_skipper --study_name 'SOME STUDY' --no-dry_run

=head1 DESCRIPTION

This script identifies runs having 'qc review pending' status where
all samples, apart from spiked controls, belong to the study given as the
--study_name argument and deplexing percent for all lanes of any such
run is 93% or above (93% is a default, other value can be given using
the --deplexing_percent_threshold argument).

Runs with tags 'no_auto' or 'no_mqc_skipper' are not considered.

An assessment of automatic RoboQC results is performed to decide
whether the run can be expedited to archival. Not more than 10%
of real samples are allowed to fail the QC assessment. (10% is a
default, other value, including 0%, can be given using the
--qc_fails_percent_threshold argument).

If the --artic_qc_fails_percent_threshold argument is set (no default
is available), it is used in addition to the qc_fails_percent_threshold
criteria.

In a non-dry run mode the status of eligible runs is changed to
'archival pending', ie the manual QC stage of the run life cycle
is skipped.

Additionally, for studies containing string 'Heron', before the run
status is changed, in a non-dry mode the autoqc review results are uploaded
to the QC database, which also saves to the database the preliminary QC
outcomes. Following this, sequencing and library QC outcomes are finalised
for all lanes of the run.  

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item lib

=item FindBin

=item Log::Log4perl

=item Getopt::Long

=item Pod::Usage

=item DBI

=item Readonly

=item Try::Tiny

=item List::MoreUtils

=item npg_qc::Schema

=item npg_tracking::Schema

=item WTSI::DNAP::Warehouse::Schema

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Marina Gourtovaia

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2019,2020,2021 Genome Research Ltd.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
